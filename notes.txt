We can use pointsize to create a bitmap where the fragment
shader can draw in. But point boundaries may overlap, so it needs to run
for every point that overlaps a particular coordinate

maybe a particle effects shader example will help us.

---

1920x1080 1.9 million pixels

8 px radius for particle field = 1.9 / 16 / 16 = 7400 particles

but who knows??

---

we will create quads, one per particle, and use those to create a
field of forces. Then we'll move each particle within the field,
and redraw. 

The velocity, type, and position of each particle will each be 
stored in a corresponding texture.

We will access it by looking at pixel + 0.5 for each coordinate.

---

I think we may be able to use point sprites, if we pass a "varying"
between the vertex and fragment shaders.
This "varying" will represent the center of the point and allow
us to choose an appropriate color for the fragment.

According to my tests in the experimental branch, this does work.

---

I think that negative values may not be a problem. I did a test
of negative values, but since the output was to the screen, I
think it clamps it to >=0.

However, in fluid, I'm pretty sure it's using negative values (a
velocity texture, and a random texture that uses cos/sin of angles
from 0 - 360 degrees). So I think whether negative numbers are
translated to the output depends on the type of output. If we use a
signed float texture, we should be ok.
